/**
 * Google Apps Script –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ Tiarkel Site
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

// ID Google —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞—è–≤–æ–∫
const SPREADSHEET_ID = 'YOUR_SPREADSHEET_ID';
const SHEET_NAME = 'Leads';

// Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const TELEGRAM_BOT_TOKEN = 'YOUR_BOT_TOKEN';
const TELEGRAM_CHAT_ID = 'YOUR_CHAT_ID';

// Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const ADMIN_EMAIL = 'admin@tiarkel.com';

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function doPost(e) {
  try {
    // –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
    const payload = JSON.parse(e.postData.contents);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!validatePayload(payload)) {
      return ContentService
        .createTextOutput(JSON.stringify({ success: false, error: 'Invalid payload' }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    const sheetId = saveToSheet(payload);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    sendTelegramNotification(payload);
    sendEmailNotification(payload);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return ContentService
      .createTextOutput(JSON.stringify({ 
        success: true, 
        lead_id: payload.lead_id,
        sheet_id: sheetId 
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    console.error('Error processing request:', error);
    
    return ContentService
      .createTextOutput(JSON.stringify({ 
        success: false, 
        error: error.toString() 
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function validatePayload(payload) {
  const requiredFields = ['lead_id', 'name', 'phone_e164', 'product_type', 'locale'];
  
  for (const field of requiredFields) {
    if (!payload[field]) {
      console.error(`Missing required field: ${field}`);
      return false;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º
  if (payload.anti_spam) {
    if (payload.anti_spam.honeypot) {
      console.error('Honeypot field filled');
      return false;
    }
    
    if (payload.anti_spam.time_to_fill_sec < 3) {
      console.error('Form filled too quickly');
      return false;
    }
  }
  
  return true;
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
 */
function saveToSheet(payload) {
  const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
  const sheet = spreadsheet.getSheetByName(SHEET_NAME);
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
  const rowData = [
    payload.lead_id,
    payload.created_at,
    payload.locale,
    payload.name,
    payload.phone_e164,
    payload.phone_display,
    payload.email,
    payload.product_type,
    payload.product_id,
    payload.comment,
    payload.utm_source,
    payload.utm_medium,
    payload.utm_campaign,
    payload.utm_content,
    payload.utm_term,
    payload.referrer,
    payload.page_url,
    payload.form_type,
    payload.user_agent,
    JSON.stringify(payload.anti_spam),
    payload.consent_policy,
    payload.consent_marketing,
    new Date().toISOString() // –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
  const lastRow = sheet.getLastRow();
  const range = sheet.getRange(lastRow + 1, 1, 1, rowData.length);
  range.setValues([rowData]);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
  formatLeadRow(sheet, lastRow + 1);
  
  return lastRow + 1;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞—è–≤–∫–æ–π
 */
function formatLeadRow(sheet, row) {
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
  const headers = [
    'Lead ID', 'Created At', 'Locale', 'Name', 'Phone E164', 'Phone Display',
    'Email', 'Product Type', 'Product ID', 'Comment', 'UTM Source', 'UTM Medium',
    'UTM Campaign', 'UTM Content', 'UTM Term', 'Referrer', 'Page URL',
    'Form Type', 'User Agent', 'Anti Spam', 'Consent Policy', 'Consent Marketing',
    'Sheet Created At'
  ];
  
  // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  if (row === 1) {
    const headerRange = sheet.getRange(1, 1, 1, headers.length);
    headerRange.setValues([headers]);
    headerRange.setFontWeight('bold');
    headerRange.setBackground('#f0f0f0');
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
  const rowRange = sheet.getRange(row, 1, 1, headers.length);
  
  // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
  const productType = sheet.getRange(row, 8).getValue(); // Product Type
  if (productType === 'course') {
    rowRange.setBackground('#e8f5e8'); // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –∫—É—Ä—Å–æ–≤
  } else if (productType === 'service') {
    rowRange.setBackground('#fff3e0'); // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —É—Å–ª—É–≥
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
  const dateRange = sheet.getRange(row, 2); // Created At
  dateRange.setNumberFormat('yyyy-mm-dd hh:mm:ss');
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
  sheet.autoResizeColumns(1, headers.length);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
 */
function sendTelegramNotification(payload) {
  try {
    const message = formatTelegramMessage(payload);
    
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      })
    };
    
    UrlFetchApp.fetch(url, options);
    
  } catch (error) {
    console.error('Telegram notification error:', error);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
 */
function formatTelegramMessage(payload) {
  const emoji = {
    new: 'üÜï',
    course: 'üìö',
    service: 'üé®',
    phone: 'üìû',
    email: 'üìß',
    time: '‚è∞',
    source: 'üåê',
    utm: 'üìä'
  };
  
  const productTypeText = payload.product_type === 'course' ? '–ö—É—Ä—Å' : '–£—Å–ª—É–≥–∞';
  const productIdText = payload.product_id ? ` (${payload.product_id})` : '';
  
  const utmInfo = payload.utm_source !== 'direct' 
    ? `\n${emoji.utm} <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${payload.utm_source} / ${payload.utm_medium}`
    : '';
  
  const emailInfo = payload.email ? `\n${emoji.email} <b>Email:</b> ${payload.email}` : '';
  const commentInfo = payload.comment ? `\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${payload.comment}` : '';
  
  return `${emoji.new} <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>

${payload.product_type === 'course' ? emoji.course : emoji.service} <b>–¢–∏–ø:</b> ${productTypeText}${productIdText}
üë§ <b>–ò–º—è:</b> ${payload.name}
${emoji.phone} <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${payload.phone_display}${emailInfo}${commentInfo}

${emoji.time} <b>–í—Ä–µ–º—è:</b> ${formatDateTime(payload.created_at)}
${emoji.source} <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> ${payload.page_url}${utmInfo}

ID: <code>${payload.lead_id}</code>`;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
function sendEmailNotification(payload) {
  try {
    const subject = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${payload.name} - ${payload.product_type}`;
    const body = formatEmailMessage(payload);
    
    MailApp.sendEmail({
      to: ADMIN_EMAIL,
      subject: subject,
      htmlBody: body
    });
    
  } catch (error) {
    console.error('Email notification error:', error);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function formatEmailMessage(payload) {
  const productTypeText = payload.product_type === 'course' ? '–ö—É—Ä—Å' : '–£—Å–ª—É–≥–∞';
  const utmInfo = payload.utm_source !== 'direct' 
    ? `<tr><td><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong></td><td>${payload.utm_source} / ${payload.utm_medium}</td></tr>`
    : '';
  
  const emailInfo = payload.email ? `<tr><td><strong>Email:</strong></td><td>${payload.email}</td></tr>` : '';
  const commentInfo = payload.comment ? `<tr><td><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong></td><td>${payload.comment}</td></tr>` : '';
  
  return `
    <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</h2>
    <table style="border-collapse: collapse; width: 100%;">
      <tr><td><strong>ID –∑–∞—è–≤–∫–∏:</strong></td><td>${payload.lead_id}</td></tr>
      <tr><td><strong>–¢–∏–ø:</strong></td><td>${productTypeText}${payload.product_id ? ` (${payload.product_id})` : ''}</td></tr>
      <tr><td><strong>–ò–º—è:</strong></td><td>${payload.name}</td></tr>
      <tr><td><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong></td><td>${payload.phone_display}</td></tr>
      ${emailInfo}
      ${commentInfo}
      <tr><td><strong>–í—Ä–µ–º—è:</strong></td><td>${formatDateTime(payload.created_at)}</td></tr>
      <tr><td><strong>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</strong></td><td>${payload.page_url}</td></tr>
      ${utmInfo}
      <tr><td><strong>–Ø–∑—ã–∫:</strong></td><td>${payload.locale}</td></tr>
    </table>
  `;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
 */
function formatDateTime(isoString) {
  const date = new Date(isoString);
  return Utilities.formatDate(date, 'Asia/Tashkent', 'dd.MM.yyyy HH:mm:ss');
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
 */
function createLeadsSheet() {
  const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  let sheet = spreadsheet.getSheetByName(SHEET_NAME);
  if (!sheet) {
    sheet = spreadsheet.insertSheet(SHEET_NAME);
  }
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
  const headers = [
    'Lead ID', 'Created At', 'Locale', 'Name', 'Phone E164', 'Phone Display',
    'Email', 'Product Type', 'Product ID', 'Comment', 'UTM Source', 'UTM Medium',
    'UTM Campaign', 'UTM Content', 'UTM Term', 'Referrer', 'Page URL',
    'Form Type', 'User Agent', 'Anti Spam', 'Consent Policy', 'Consent Marketing',
    'Sheet Created At'
  ];
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headerRange = sheet.getRange(1, 1, 1, headers.length);
  headerRange.setValues([headers]);
  headerRange.setFontWeight('bold');
  headerRange.setBackground('#f0f0f0');
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
  sheet.autoResizeColumns(1, headers.length);
  
  // –§–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  sheet.setFrozenRows(1);
  
  console.log('Leads sheet created successfully');
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ CSV (–¥–ª—è –±—ç–∫–∞–ø–æ–≤)
 */
function exportToCSV() {
  const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
  const sheet = spreadsheet.getSheetByName(SHEET_NAME);
  
  const data = sheet.getDataRange().getValues();
  const csvContent = data.map(row => row.join(',')).join('\n');
  
  const fileName = `tiarkel_leads_${new Date().toISOString().split('T')[0]}.csv`;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Drive
  const folder = DriveApp.getFolderById('YOUR_BACKUP_FOLDER_ID');
  const file = folder.createFile(fileName, csvContent, MimeType.CSV);
  
  console.log(`CSV backup created: ${file.getUrl()}`);
  return file.getUrl();
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)
 */
function cleanupOldLeads() {
  const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
  const sheet = spreadsheet.getSheetByName(SHEET_NAME);
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1);
  
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - 90);
  
  const rowsToDelete = [];
  
  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    const createdDate = new Date(row[1]); // Created At column
    
    if (createdDate < cutoffDate) {
      rowsToDelete.push(i + 2); // +2 because we start from row 2 and arrays are 0-indexed
    }
  }
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  for (let i = rowsToDelete.length - 1; i >= 0; i--) {
    sheet.deleteRow(rowsToDelete[i]);
  }
  
  console.log(`Deleted ${rowsToDelete.length} old leads`);
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function getLeadsStats() {
  const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
  const sheet = spreadsheet.getSheetByName(SHEET_NAME);
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1);
  
  const stats = {
    total: rows.length,
    by_type: {},
    by_locale: {},
    by_source: {},
    today: 0,
    this_week: 0,
    this_month: 0
  };
  
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
  const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
  
  rows.forEach(row => {
    const createdDate = new Date(row[1]);
    const productType = row[7];
    const locale = row[2];
    const utmSource = row[10];
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
    stats.by_type[productType] = (stats.by_type[productType] || 0) + 1;
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ —è–∑—ã–∫–∞–º
    stats.by_locale[locale] = (stats.by_locale[locale] || 0) + 1;
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    stats.by_source[utmSource] = (stats.by_source[utmSource] || 0) + 1;
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (createdDate >= today) stats.today++;
    if (createdDate >= weekAgo) stats.this_week++;
    if (createdDate >= monthAgo) stats.this_month++;
  });
  
  return stats;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function testFormSubmission() {
  const testPayload = {
    lead_id: 'test_' + Date.now(),
    created_at: new Date().toISOString(),
    locale: 'ru',
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    phone_e164: '+79991234567',
    phone_display: '+7 (999) 123-45-67',
    email: 'test@example.com',
    product_type: 'course',
    product_id: 'pro',
    comment: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
    utm_source: 'test',
    utm_medium: 'manual',
    utm_campaign: 'test_campaign',
    utm_content: '',
    utm_term: '',
    referrer: '',
    page_url: 'https://tiarkel.com/test',
    form_type: 'course',
    user_agent: 'Test User Agent',
    anti_spam: {
      honeypot: '',
      time_to_fill_sec: 10
    },
    consent_policy: true,
    consent_marketing: false
  };
  
  const result = doPost({
    postData: {
      contents: JSON.stringify(testPayload)
    }
  });
  
  console.log('Test result:', result.getContent());
} 